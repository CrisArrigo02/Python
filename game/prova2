import pygame
pygame.init()

displayWidth = 900
displayHeight = 740
gameDisplay = pygame.display.set_mode((displayWidth, displayHeight))
pygame.display.set_caption('Game')
clock = pygame.time.Clock()
FPS = 30

block_size = 35
barrier = 5
main_x = barrier + block_size
main_y = displayHeight - block_size - barrier

white = 255, 255, 255
black = 0, 0, 0
red = 255, 0, 0
green = 0, 255, 0
blue = 0, 0, 255
SmallFont = pygame.font.SysFont('comicsans', 35)
MediumFont = pygame.font.SysFont('comicsans', 50)
LargeFont = pygame.font.SysFont('comicsans', 80)


def textObjects(text, color, size):
    if size == 'small':
        textSurface = SmallFont.render(text, True, color)
    elif size == 'medium':
        textSurface = MediumFont.render(text, True, color)
    elif size == 'large':
        textSurface = LargeFont.render(text, True, color)
    return textSurface, textSurface.get_rect()

def messageToScreen(msg, color, y = 0, size = 'small'):
    textSurface, textRect = textObjects (msg, color, size)
    textRect.center = (displayWidth//2), (displayHeight//2) + y
    gameDisplay.blit(textSurface, textRect)
    pygame.display.update()

class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel = block_size//2
        self.left = True
        self.up = False
        self.LoR = True

    def draw(self, gameDisplay):
        pygame.draw.rect(gameDisplay, black, [self.x, self.y, self.width, self.height])

class projectile(object):
    def __init__(self,x,y,radius,color,facing):
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.facing = facing
        self.vel = 8 * facing

    def draw(self,win):
        pygame.draw.circle(win, self.color, (self.x,self.y), self.radius)

def gameIntro():
    intro = True
    while intro:
        gameDisplay.fill(black)
        messageToScreen('Benvenuto', red, size = 'large')
        messageToScreen('Premi \'Q\' per iniziare a giocare>', red, 50, 'medium')
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    pygame.quit()
                    quit()
                elif event.key == pygame.K_q:
                    intro = False

def mainLoop():
    def redrawGameDIsplay():
        gameDisplay.fill(white)
        man.draw(gameDisplay)
        for bullet in bullets:
            bullet.draw(gameDisplay)
        for bullet2 in bullets2:
            bullet2.draw(gameDisplay)
        pygame.display.update()

    shootLoop = 0
    bullets = []
    bullets2 = []
    man = player(main_x, main_y, block_size, block_size)
    run = True
    while run:

         #quit
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
        #quit
        keys = pygame.key.get_pressed()
        if keys[pygame.K_ESCAPE]:
            run = False

        # movement
        if keys[pygame.K_a] and man.x > barrier:
            man.x -= man.vel
            man.left = True
            man.LoR = True
        elif keys[pygame.K_d] and man.x < displayWidth - barrier - block_size:
            man.x += man.vel
            man.left = False
            man.LoR = True
        elif keys[pygame.K_w] and man.y > barrier:
            man.y -= man.vel
            man.up = True
            man.LoR = False
        elif keys[pygame.K_s] and man.y < displayHeight - barrier - block_size:
            man.y += man.vel
            man.up = False
            man.LoR = False

        if shootLoop > 0:
            shootLoop += 1
        if shootLoop > 3:
            shootLoop = 0

        if keys[pygame.K_SPACE] and shootLoop == 0:
            if man.LoR:
                if man.left:
                    facing = -1
                else:
                    facing = 1
                if len(bullets) < 5:
                    bullets.append(projectile(round(man.x + man.width // 2), round(man.y + man.height // 2), 6, red, facing))
                shootLoop = 1
            elif not man.LoR and shootLoop == 0:
                if man.up:
                    facing = -1
                else:
                    facing = 1
                if len(bullets2) < 5:
                    bullets2.append(projectile(round(man.x + man.width//2), round(man.y + man.height//2), 6, red, facing))
                shootLoop = 1
        for bullet in bullets:
            if bullet.x < displayWidth and bullet.x > 0:
                bullet.x += bullet.vel
            else:
                bullets.pop(bullets.index(bullet))
        for bullet2 in bullets2:
            if bullet2.y >0 and bullet2.y < displayHeight:
                bullet2.y += bullet2.vel
            else:
                bullets2.pop(bullets2.index(bullet2))

        clock.tick(FPS)
        redrawGameDIsplay()

    pygame.quit()
    quit()

gameIntro()
mainLoop()
